#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
Terraform Parser.
-----------------
Terraform is a tool developed by Hashicorp inc. It can be used to
build, change and version infrastructure safely and efficiently. It has support
for several popular cloud/service providers.

Terraform reads user generated .tf configuration files and generates a plan
that it can execute on to build the described infrastructure. It saves this
state/plan in a tfstate file.

What this parser does is part the terraform state file to generate a more
concise database of all the resources generated by terraform.

The parser will recursively scan through all the subdirectotires to scan
all the tfstate files and generate a structure keyed by the cluster name
and all resources within.

'''

import sys
import os
import json
import utils.symphony_logger as logger


class TFParser(object):
    def __init__(self, cluster_staging_dir,
                 slogger=None):
        '''
        Terraform Parser Initializer.

        :type cluster_staging_dir: string
        :param cluster_staging_dir: A path to the terraform staging folder

        :type slogger: Symphony logger
        :param slogger: Symphony logging class to log debug/info/error/warnings
        '''
        self.cluster_staging_dir = None
        self.tfobject = None

        if slogger is None:
            self.slog = logger.Logger(name="TFParser")
        else:
            self.slog = slogger

        if not os.path.exists(cluster_staging_dir) or \
                not os.path.isdir(cluster_staging_dir):
            self.slog.logger.error("Invalid staging dir [%s]",
                                   cluster_staging_dir)
            return

        self.cluster_staging_dir = cluster_staging_dir
        self.tfobject = self.__parser_walk_staging_environment()

        self.slog.logger.debug("TFParser Initialized")

    def __parser_walk_staging_environment(self):
        '''
        The API walks the staging directory and builds the
        tfstate object with multiple environments or a single env,
        depending on the staging dir.
        '''
        envobj = {}
        for dirpath, dirs, files in os.walk(self.cluster_staging_dir):
            dirname = os.path.basename(dirpath)
            if dirname == "" or dirname == ".terraform":
                continue

            if "terraform.tfstate" not in files:
                continue

            terraform_file = os.path.join(dirpath, "terraform.tfstate")
            self.slog.logger.debug("TF File: %s", terraform_file)

            if not os.path.exists(terraform_file):
                self.slog.logger.error("Invalid terraform file [%s]",
                                       terraform_file)
                sys.exit()

            with open(terraform_file, "r") as tf_fp:
                envobj[dirname] = {}
                envobj[dirname] = json.load(tf_fp)


            self.slog.logger.debug("oswalk: dripath: %s, dirs: %s, files: %s",
                                   dirpath, dirs, files)

        return envobj










