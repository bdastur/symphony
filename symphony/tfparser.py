#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
Terraform Parser.
-----------------
Terraform is a tool developed by Hashicorp inc. It can be used to
build, change and version infrastructure safely and efficiently. It has support
for several popular cloud/service providers.

Terraform reads user generated .tf configuration files and generates a plan
that it can execute on to build the described infrastructure. It saves this
state/plan in a tfstate file.

What this parser does is parse the terraform state file to generate a more
concise database of all the resources generated by terraform.

The parser will recursively scan through all the subdirectotires to scan
all the tfstate files and generate a structure keyed by the cluster name
and all resources within.

'''

import sys
import os
import json
import prettytable
import re
import utils.symphony_logger as logger


class TFParser(object):
    def __init__(self, cluster_staging_dir,
                 slogger=None):
        '''
        Terraform Parser Initializer.

        :type cluster_staging_dir: string
        :param cluster_staging_dir: A path to the terraform staging folder

        :type slogger: Symphony logger
        :param slogger: Symphony logging class to log debug/info/error/warnings
        '''
        self.cluster_staging_dir = None
        self.tfobject = None

        if slogger is None:
            self.slog = logger.Logger(name="TFParser")
        else:
            self.slog = slogger

        if not os.path.exists(cluster_staging_dir) or \
                not os.path.isdir(cluster_staging_dir):
            self.slog.logger.error("Invalid staging dir [%s]",
                                   cluster_staging_dir)
            return

        self.cluster_staging_dir = cluster_staging_dir
        self.tfobject = self.__parser_walk_staging_environment()

        self.slog.logger.debug("TFParser Initialized")

    def __parser_walk_staging_environment(self):
        '''
        The API walks the staging directory and builds the
        tfstate object with multiple environments or a single env,
        depending on the staging dir.
        '''
        envobj = {}
        for dirpath, dirs, files in os.walk(self.cluster_staging_dir):
            dirname = os.path.basename(dirpath)
            if dirname == "" or dirname == ".terraform":
                continue

            if "terraform.tfstate" not in files:
                continue

            terraform_file = os.path.join(dirpath, "terraform.tfstate")
            self.slog.logger.debug("TF File: %s", terraform_file)

            if not os.path.exists(terraform_file):
                self.slog.logger.error("Invalid terraform file [%s]",
                                       terraform_file)
                sys.exit()

            with open(terraform_file, "r") as tf_fp:
                envobj[dirname] = {}
                envobj[dirname] = json.load(tf_fp)

            self.slog.logger.debug("oswalk: dripath: %s, dirs: %s, files: %s",
                                   dirpath, dirs, files)

        return envobj

    def parser_get_all_resource_types(self):
        '''
        Utility API to get all the resource types present in the
        tfstate
        '''
        envobj = {}
        for env in self.tfobject.keys():
            envobj[env] = {}
            for module in self.tfobject[env]['modules']:
                envobj[env]['types'] = set()
                for reskey, resval in module['resources'].items():
                    envobj[env]['types'].add(resval['type'])

        return envobj

    def parser_get_aws_instance_info(self):
        '''
        Utility API to return the aws instances.
        '''
        obj = {}
        for env in self.tfobject.keys():
            obj[env] = {}
            for module in self.tfobject[env]['modules']:
                for reskey, resval in module['resources'].items():
                    attributes = resval['primary']['attributes']
                    restype = resval['type']
                    resid = attributes['id']

                    if restype == "aws_instance":
                        instobj = {}
                        instobj['ami'] = attributes['ami']
                        instobj['private_ip'] = attributes['private_ip']

                        obj[env][resid] = instobj

        return obj

    def terraform_get_environment_summary(self):
        '''
        Return a reformat obj with summarized info.
        Can be used to display.
        '''
        summary = {}
        for env in self.tfobject.keys():
            summary[env] = {}
            for module in self.tfobject[env]['modules']:
                for reskey, resval in module['resources'].items():
                    attributes = resval['primary']['attributes']
                    restype = resval['type']
                    if summary[env].get(restype, None) is None:
                        summary[env][restype] = {}

                    res_id = attributes['id']
                    summary[env][restype][res_id] = {}
                    obj = summary[env][restype][res_id]
                    if restype == "aws_instance":
                        obj['ami'] = attributes['ami']
                        obj['private_ip'] = attributes['private_ip']
                        obj['instance_state'] = attributes['instance_state']
                        obj['instance_type'] = attributes['instance_type']
                        obj['key_name'] = attributes['key_name']
                    if restype == "aws_elb":
                        obj['name'] = attributes['name']
                        obj['availability_zones'] = []
                        obj['instances'] = []
                        for key, attr in attributes.items():
                            if re.match(r'availability_zones\.(\d+)',
                                        key):
                                obj['availability_zones'].append(attr)
                            elif re.match(r'instances\.(\d+)',
                                          key):
                                obj['instances'].append(attr)

        return summary

    def terraform_display_aws_resource_summary(self,
                                               resource_type,
                                               resource_info):
        '''
        Display aws instance summary info.
        '''
        header_set = False
        headers = []
        row = []
        for resource in resource_info.keys():
            row = []
            if not header_set:
                headers.append("Id")

            row.append(resource)
            for key, attr in resource_info[resource].items():
                if not header_set:
                    headers.append(key)
                row.append(attr)

            if not header_set:
                table = prettytable.PrettyTable(headers)
                header_set = True

            table.add_row(row)

        print "Resource: " + resource_type
        print "-" * 30
        print table
        print "\n"

    def terraform_display_environments(self):
        '''
        API that displays the tf environments.
        '''
        summary = self.terraform_get_environment_summary()
        print "=" * 50
        print "Symphony - TF Environments"
        print "=" * 50

        for env in summary.keys():
            print "Environment: ", env
            print "-" * 30

            for restype in summary[env].keys():
                if restype == "aws_instance" or \
                        restype == "aws_elb":
                    self.terraform_display_aws_resource_summary(
                        restype,
                        summary[env][restype])
            print "\n"










